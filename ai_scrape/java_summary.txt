==== java/com/example/evaliaproject/EvaliaProjectApplication.java ====
Class: EvaliaProjectApplication (class)


==== java/com/example/evaliaproject/ai/MistralConfig.java ====
Class: MistralConfig (class)
Fields:
  private String baseUrl
  private String apiKey


==== java/com/example/evaliaproject/ai/ChatController.java ====
Class: ChatController (class)
Mappings:
  @RequestMapping paths=['/api/ai']
  @PostMapping paths=['/chat']
Fields:
  private final WebClient mistral
  private String model


==== java/com/example/evaliaproject/service/QuizService.java ====
Class: QuizService (class)


==== java/com/example/evaliaproject/service/ICategoryService.java ====
Class: ICategoryService (interface)


==== java/com/example/evaliaproject/service/INotificationService.java ====
Class: INotificationService (interface)


==== java/com/example/evaliaproject/service/ResponsePanelisteService.java ====
Class: ResponsePanelisteService (class)
Fields:
  private ResponsePanelisteRepository responsePanelisteRepository


==== java/com/example/evaliaproject/service/NotificationService.java ====
Class: NotificationService (class)
Javadoc:
/**
 * Service applicatif pour cr√©er/lire/mettre √† jour les notifications.
 */
@Service
@RequiredArgsConstructor
public class NotificationService implements INotificationService {

    private final NotificationRepository repo;
    private final ApplicationEventPublisher events;
    private final NotificationStreamService streamService;

    /** Event interne pour d√©clencher le push SSE apr√®s commit. */
    public record NotificationCreatedEvent(Notification notif) {}

    @Transactional
    public void notify(User recipient, Announce ann, String message, NotificationType type) {
        Notification n = Notification.builder()
                .recipient(recipient)
                .announcement(ann)
                .type(type)
                .message(message)
                .seen(false)
                .build();
        n = repo.save(n);
        events.publishEvent(new NotificationCreatedEvent(n)); // push sera AFTER_COMMIT
    }

    @TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)
    public void onCreated(NotificationCreatedEvent ev) {
        Notification n = ev.notif();
        NotificationDto dto = NotificationMapper.toDto(n);
        Long uid = n.getRecipient().getId_user();
        streamService.push(dto, uid);
    }

    @Transactional(readOnly = true)
    public List<Notification> listForUser(Long userId) {
        return repo.findByRecipientOrderByCreatedAtDesc(userId);
    }

    @Transactional
    public void markSeen(String id) {
        var n = repo.findById(id).orElseThrow();
        n.setSeen(true);
        repo.save(n);
    }

    @Transactional
    public void markAllSeen(Long userId) {
        var list = repo.findByRecipientOrderByCreatedAtDesc(userId);
        for (var n : list) if (!n.isSeen()) n.setSeen(true);
        repo.saveAll(list);
    }

    @Transactional(readOnly = true)
    public long unseenCount(Long userId) {
        return repo.countUnseen(userId);
    }

}

//    private final NotificationRepository repo;
//    @Autowired
//    private NotificationStreamService streamService; // üëà SSE
//
//    /**
//     * Cr√©e et persiste une notification, puis la pousse en SSE
//     * uniquement apr√®s COMMIT pour √©viter les "fant√¥mes".
//     */
Fields:
  private final NotificationRepository repo
  private final ApplicationEventPublisher events
  private final NotificationStreamService streamService
  private final NotificationRepository repo
  private NotificationStreamService streamService


==== java/com/example/evaliaproject/service/RecompensesService.java ====
Class: RecompensesService (class)


==== java/com/example/evaliaproject/service/IQuestionService.java ====
Class: IQuestionService (interface)


==== java/com/example/evaliaproject/service/QuestionService.java ====
Class: QuestionService (class)
Fields:
  private QuestionRepository questionRepository


==== java/com/example/evaliaproject/service/PlanningService.java ====
Class: PlanningService (class)
Fields:
  private final PlanningRepository repo
  private final AnnouncementRepository announcementRepo
  private final UserRepository userRepo
  private final UserRepository userRepo
  private final NotificationService notificationService


==== java/com/example/evaliaproject/service/IResponsePanelisteService.java ====
Class: IResponsePanelisteService (interface)


==== java/com/example/evaliaproject/service/NotificationStreamService.java ====
Class: NotificationStreamService (class)
Javadoc:
/**
 * G√®re les connexions SSE par utilisateur et l'envoi
 * de notifications aux clients connect√©s.
 */
@Service
public class NotificationStreamService {




    private final ConcurrentMap<Long, CopyOnWriteArraySet<SseEmitter>> emitters = new ConcurrentHashMap<>();
    private static final long TIMEOUT_MS = Duration.ofMinutes(30).toMillis();

    public SseEmitter register(Long userId) {
        SseEmitter emitter = new SseEmitter(TIMEOUT_MS);
        emitters.computeIfAbsent(userId, id -> new CopyOnWriteArraySet<>()).add(emitter);

        emitter.onCompletion(() -> remove(userId, emitter));
        emitter.onTimeout(() -> remove(userId, emitter));
        emitter.onError(e -> remove(userId, emitter));

        try { emitter.send(SseEmitter.event().name("hello").data("connected")); }
        catch (IOException ignored) {}

        return emitter;
    }

    /** ‚¨áÔ∏è maintenant on push un DTO */
    public void push(NotificationDto dto, Long recipientUserId) {
        Set<SseEmitter> set = emitters.get(recipientUserId);
        if (set == null || set.isEmpty()) return;

        for (SseEmitter em : set) {
            try {
                em.send(
                        SseEmitter.event()
                                .name("notification")
                                .id(dto.id())
                                .data(dto)
                );
            } catch (IOException e) {
                remove(recipientUserId, em);
            }
        }
    }

    public void ping(Long userId) {
        Set<SseEmitter> set = emitters.get(userId);
        if (set == null) return;
        for (SseEmitter em : set) {
            try { em.send(SseEmitter.event().name("ping").data("‚Ä¢")); }
            catch (IOException ignored) {}
        }
    }

    private void remove(Long userId, SseEmitter emitter) {
        var set = emitters.get(userId);
        if (set != null) {
            set.remove(emitter);
            if (set.isEmpty()) emitters.remove(userId);
        }
    }

}
//
//    // Map: userId -> set d'emitters (un par onglet navigateur)
//    private final ConcurrentMap<Long, CopyOnWriteArraySet<SseEmitter>> emitters = new ConcurrentHashMap<>();
//
//    // Dur√©e de vie d'une connexion SSE (le navigateur se reconnecte)
//    private static final long TIMEOUT_MS = Duration.ofMinutes(30).toMillis();
//
//    /**
//     * Appel√© quand un client s'abonne au flux SSE (/notifications/stream).
//     */
//    public SseEmitter register(Long userId) {
//        SseEmitter emitter = new SseEmitter(TIMEOUT_MS);
//
//        emitters.computeIfAbsent(userId, id -> new CopyOnWriteArraySet<>()).add(emitter);
//
//        // Nettoyage quand la connection se termine/expire/erreur
//        emitter.onCompletion(() -> remove(userId, emitter));
//        emitter.onTimeout(() -> remove(userId, emitter));
//        emitter.onError(e -> remove(userId, emitter));
//
//        // message "hello" imm√©diat (facultatif)
//        try {
//            emitter.send(SseEmitter.event().name("hello").data("connected"));
//        } catch (IOException ignored) {}
//
//        return emitter;
//    }
//
//    /**
//     * Envoie une notification √† tous les clients connect√©s du destinataire.
//     * Appeler ceci APR√àS COMMIT (voir NotificationService).
//     */
//    public void push(Notification n) {
//        Long uid = n.getRecipient().getId_user();
//        Set<SseEmitter> set = emitters.get(uid);
//        if (set == null || set.isEmpty()) return;
//
//        for (SseEmitter em : set) {
//            try {
//                em.send(SseEmitter.event()
//                        .name("notification")     // event name c√¥t√© front
//                        .id(n.getIdnotif())       // permet "Last-Event-ID" si besoin
//                        .data(n));                // Spring convertit en JSON
//            } catch (IOException e) {
//                // si le client a ferm√©, on retire l'emitter
//                remove(uid, em);
//            }
//        }
//    }
//
//    /** Envoi d'un ping pour garder la connexion active (optionnel). */


==== java/com/example/evaliaproject/service/IFeedbackSevice.java ====
Class: IFeedbackSevice (interface)


==== java/com/example/evaliaproject/service/IQuizService.java ====
Class: IQuizService (interface)


==== java/com/example/evaliaproject/service/FeedbackService.java ====
Class: FeedbackService (class)
Fields:
  private FeedbackRepository feedbackRepository
  private AnnouncementRepository announcementRepository
  private UserRepository userRepository
  private EarnedRewardRepository earnedRewardRepository
  private NotificationService notificationService


==== java/com/example/evaliaproject/service/FileStorageService.java ====
Class: FileStorageService (class)
Fields:
  private String uploadDir


==== java/com/example/evaliaproject/service/ServiceEmail.java ====
Class: ServiceEmail (class)
Fields:
  private JavaMailSender mailSender
  private String from
  private String supportEmail
  private String loginUrl


==== java/com/example/evaliaproject/service/IUserService.java ====
Class: IUserService (interface)


==== java/com/example/evaliaproject/service/CategoryService.java ====
Class: CategoryService (class)
Fields:
  private CategoryRepository categoryRepository


==== java/com/example/evaliaproject/service/IAnnouncementService.java ====
Class: IAnnouncementService (interface)


==== java/com/example/evaliaproject/service/QuizFlowService.java ====
Class: QuizFlowService (class)
Fields:
  private final AnnouncementRepository announcementRepository
  private final QuizRepository quizRepository
  private final QuizAttemptRepository attemptRepository
  private final AttemptAnswerRepository answerRepository
  private final QuestionRepository questionRepository
  private final ResponsePanelisteRepository responseRepository
  private final UserRepository userRepository


==== java/com/example/evaliaproject/service/AnnouncementService.java ====
Class: AnnouncementService (class)
Fields:
  private AnnouncementRepository announcementRepository
  private CategoryRepository categoryRepository
  private UserRepository userRepository
  private RecompensesRepository recompensesRepository
  private QuestionRepository questionRepository
  private AttemptAnswerRepository attemptAnswerRepository
  private QuizAttemptRepository quizAttemptRepository
  private FeedbackRepository feedbackRepository
  private EarnedRewardRepository earnedRewardRepository
  private NotificationRepository notificationRepository
  private String uploadDir


==== java/com/example/evaliaproject/service/ReclamationService.java ====
Class: ReclamationService (class)


==== java/com/example/evaliaproject/service/UserService.java ====
Class: UserService (class)
Fields:
  private UserRepository userRepository


==== java/com/example/evaliaproject/service/IRecompensesService.java ====
Class: IRecompensesService (interface)


==== java/com/example/evaliaproject/service/IReclamationService.java ====
Class: IReclamationService (interface)


==== java/com/example/evaliaproject/config/JwtAuthentificationFilter.java ====
Class: JwtAuthentificationFilter (class)
Fields:
  private final UserDetailsService userDetailsService
  private final JwtService jwtService


==== java/com/example/evaliaproject/config/ApplicationConfig.java ====
Class: ApplicationConfig (class)
Fields:
  private final PasswordEncoder passwordEncoder
  private final UserRepository userRepository


==== java/com/example/evaliaproject/config/SseNoBufferFilter.java ====
Class: SseNoBufferFilter (class)
Javadoc:
/**
 * D√©sactive le buffering proxy pour les r√©ponses SSE afin
 * d'√©viter des retards d'affichage c√¥t√© client.
 */


==== java/com/example/evaliaproject/config/OsivConfig.java ====
Class: OsivConfig (class)


==== java/com/example/evaliaproject/config/JwtService.java ====
Class: JwtService (class)


==== java/com/example/evaliaproject/config/SecurityConfiguration.java ====
Class: SecurityConfiguration (class)
Fields:
  private final JwtAuthentificationFilter jwtAuthFilter
  private final AuthenticationProvider authenticationProvider


==== java/com/example/evaliaproject/repository/AttemptAnswerRepository.java ====
Class: AttemptAnswerRepository (interface)


==== java/com/example/evaliaproject/repository/QuizRepository.java ====
Class: QuizRepository (interface)


==== java/com/example/evaliaproject/repository/QuizAttemptRepository.java ====
Class: QuizAttemptRepository (interface)


==== java/com/example/evaliaproject/repository/ReclamationRepository.java ====
Class: ReclamationRepository (interface)


==== java/com/example/evaliaproject/repository/NotificationRepository.java ====
Class: NotificationRepository (interface)


==== java/com/example/evaliaproject/repository/RecompensesRepository.java ====
Class: RecompensesRepository (interface)


==== java/com/example/evaliaproject/repository/QuestionRepository.java ====
Class: QuestionRepository (interface)


==== java/com/example/evaliaproject/repository/FeedbackRepository.java ====
Class: FeedbackRepository (interface)


==== java/com/example/evaliaproject/repository/RoleRepository.java ====
Class: RoleRepository (interface)


==== java/com/example/evaliaproject/repository/ResponsePanelisteRepository.java ====
Class: ResponsePanelisteRepository (interface)


==== java/com/example/evaliaproject/repository/EarnedRewardRepository.java ====
Class: EarnedRewardRepository (interface)


==== java/com/example/evaliaproject/repository/TokenRepository.java ====
Class: TokenRepository (interface)


==== java/com/example/evaliaproject/repository/CategoryRepository.java ====
Class: CategoryRepository (interface)


==== java/com/example/evaliaproject/repository/AnnouncementRepository.java ====
Class: AnnouncementRepository (interface)


==== java/com/example/evaliaproject/repository/PlanningRepository.java ====
Class: PlanningRepository (interface)


==== java/com/example/evaliaproject/repository/UserRepository.java ====
Class: UserRepository (interface)


==== java/com/example/evaliaproject/auth/RestExceptionHandler.java ====
Class: RestExceptionHandler (class)


==== java/com/example/evaliaproject/auth/AuthenticationService.java ====
Class: AuthenticationService (class)
Fields:
  private final UserRepository userRepository
  private final RoleRepository roleRepository
  private final JwtService jwtService
  private final TokenRepository tokenRepository
  private final ServiceEmail serviceEmail
  private final FileStorageService fileStorageService
  private Token token
  private final PasswordEncoder passwordEncoder
  private final AuthenticationManager authenticationManager


==== java/com/example/evaliaproject/auth/AuthenticationResponse.java ====
Class: AuthenticationResponse (class)
Fields:
  private String token
  private String message
  private boolean pending


==== java/com/example/evaliaproject/auth/OtpLoginController.java ====
Class: OtpLoginController (class)
Class: ConfirmOtpRequest (class)
Mappings:
  @RequestMapping paths=['/api/v1/auth']
  @PostMapping paths=['/confirm-otp']
Fields:
  private final UserRepository userRepository
  private final TokenRepository tokenRepository
  private final JwtService jwtService
  private String email
  private String code


==== java/com/example/evaliaproject/auth/AuthenticationRequest.java ====
Class: AuthenticationRequest (class)
Fields:
  private String email
  private String password


==== java/com/example/evaliaproject/auth/PasswordResetService.java ====
Class: PasswordResetService (class)
Fields:
  private final UserRepository userRepository
  private final TokenRepository tokenRepository
  private final PasswordEncoder passwordEncoder
  private final ServiceEmail email
  private String frontendUrl


==== java/com/example/evaliaproject/auth/RegisterRequest.java ====
Class: RegisterRequest (class)
Fields:
  private String firstname
  private String lastname
  private String deliveryAddress
  private String email
  private String password
  private String numTelephone
  private TypeUser typeUser
  private String companyName
  private String jobTitle
  private Integer age
  private String ageRange
  private String iban
  private String role
  private String firstname
  private String lastname
  private String email
  private String password
  private String role
  private String ageRange
  private LocalDateTime createdDate


==== java/com/example/evaliaproject/auth/PasswordResetController.java ====
Class: PasswordResetController (class)
Class: ForgotRequest (class)
Class: ResetRequest (class)
Mappings:
  @RequestMapping paths=['/api/v1/auth/password']
  @PostMapping paths=['/forgot']
  @PostMapping paths=['/reset']
Fields:
  private final PasswordResetService resetService
  private String email
  private String code
  private String newPassword


==== java/com/example/evaliaproject/auth/AuthenticationController.java ====
Class: AuthenticationController (class)
Class: FirstLoginOtpRequest (class)
Mappings:
  @RequestMapping paths=['/api/v1/auth']
  @GetMapping paths=['/getPanelist']
  @GetMapping paths=['/getPanelist/{id}']
  @PostMapping paths=['/authenticate/first-login/verify']
  @PostMapping paths=['/register']
  @GetMapping paths=['/verify']
  @PostMapping paths=['/register']
  @PostMapping paths=['/register']
  @PostMapping paths=['/authenticate']
  @PostMapping paths=['/register/announceur']
  @PostMapping paths=['/register/paneliste']
Fields:
  private final AuthenticationService authenticationService
  private UserRepository userRepository
  private TokenRepository tokenRepository
  private JwtService jwtService
  private String email
  private String code


==== java/com/example/evaliaproject/controller/ReclamationController.java ====
Class: ReclamationController (class)
Mappings:
  @RequestMapping paths=['/reclamation']
  @PostMapping paths=['/addReclamation']
  @GetMapping paths=['/mine']
  @GetMapping paths=['/getDetailsReclamation/{id}']
  @PutMapping paths=['/updateReclamation/{id}']
  @DeleteMapping paths=['/deleteReclamation/{id}']
  @PostMapping paths=['/addReclamation']
  @GetMapping paths=['/getAllReclamation']
  @GetMapping paths=['/getDetailsReclamation/{id}']
  @PutMapping paths=['/updateReclamation/{id}']
  @DeleteMapping paths=['/deleteReclamation/{id}']


==== java/com/example/evaliaproject/controller/ResponsePanelisteController.java ====
Class: ResponsePanelisteController (class)
Mappings:
  @RequestMapping paths=['/reponsepaneliste']
  @PostMapping paths=['/add']
  @PutMapping paths=['/update/{id}']
  @GetMapping paths=['/get/{id}']
  @GetMapping paths=['/all']
  @GetMapping paths=['/byQuestion/{qid}']
  @DeleteMapping paths=['/delete/{id}']
  @GetMapping paths=['/byQuestion/{qid}']
Fields:
  private IResponsePanelisteService service


==== java/com/example/evaliaproject/controller/FeedbackController.java ====
Class: FeedbackController (class)
Class: MyFeedbackUpdateRequest (class)
Mappings:
  @RequestMapping paths=['/feedback']
  @PostMapping paths=['/simple/announces/{announcementId}']
  @GetMapping paths=['/announces/{announcementId}']
  @GetMapping paths=['/mine/announces/{announcementId}']
  @PutMapping paths=['/mine/announces/{announcementId}']
  @GetMapping paths=['/panelists/{panelistId}']
  @GetMapping paths=['/mine/announces/{announcementId}']
  @GetMapping paths=['/announces/{announcementId}/stats']
  @GetMapping paths=['/owner/announces/{announcementId}']
  @PutMapping paths=['/mine/announces/{announcementId}']
  @GetMapping paths=['/me']
  @GetMapping paths=['/me/rewards']
  @GetMapping paths=['/owner/rewards']
  @GetMapping paths=['/owner/announces/{announcementId}/rewards']
  @PutMapping paths=['/owner/rewards/{earnedRewardId}/status']
  @GetMapping paths=['/owner/annonces/{announcementId}', '/owner/announces/{announcementId}']
Fields:
  private IFeedbackSevice feedbackService
  private FeedbackRepository feedbackRepository
  private UserRepository userRepository
  public Integer rating
  public String comment


==== java/com/example/evaliaproject/controller/ParticipantQuizController.java ====
Class: ParticipantQuizController (class)
Mappings:
  @RequestMapping paths=['/participation']
  @PostMapping paths=['/announces/{announceId}/quizzes/{quizId}/start']
  @PostMapping paths=['/attempts/{attemptId}/submit-raw']
  @PostMapping paths=['/announces/{announceId}/quizzes/{quizId}/start']
  @PostMapping paths=['/attempts/{attemptId}/submit-raw']
  @PostMapping paths=['/announces/{announceId}/quizzes/{quizId}/start']
  @PostMapping paths=['/attempts/{attemptId}/submit-raw']
  @GetMapping paths=['/announces/{announceId}/attempts']
  @GetMapping paths=['/announces/{announceId}/attempts']
  @PostMapping paths=['/announces/{announceId}/quizzes/{quizId}/start']
  @PostMapping paths=['/attempts/{attemptId}/submit-raw']
  @GetMapping paths=['/announces/{announceId}/attempts']
  @GetMapping paths=['/announces/{announceId}/quizzes/{quizId}/attempts']
  @GetMapping paths=['/announces/{announceId}/attempts']
  @GetMapping paths=['/announces/{announceId}/quizzes/{quizId}/attempts']
Fields:
  private final QuizFlowService quizFlowService


==== java/com/example/evaliaproject/controller/NotificationSseController.java ====
Class: NotificationSseController (class)
Javadoc:
/**
 * Endpoint SSE : le front s'y connecte via EventSource.
 */
Mappings:
  @RequestMapping paths=['/notifications']
  @GetMapping paths=['/stream']
Fields:
  private final NotificationStreamService streamService
  private final UserRepository userRepository


==== java/com/example/evaliaproject/controller/PanelistController.java ====
Class: PanelistController (class)
Mappings:
  @RequestMapping paths=['/panelists']
  @GetMapping paths=['/eligible']
Fields:
  private final UserRepository userRepo


==== java/com/example/evaliaproject/controller/AnnouncementController.java ====
Class: AnnouncementController (class)
Mappings:
  @RequestMapping paths=['/Announcement']
  @GetMapping paths=['/categories']
  @PostMapping paths=['/addAnnouncement']
  @GetMapping paths=['/getAllAnnouncements']
  @GetMapping paths=['/getAllAnnounces']
  @GetMapping paths=['/getDetailsAnnouncement/{id}']
  @PutMapping paths=['/updateAnnouncement/{id}']
  @DeleteMapping paths=['/deleteAnnouncement/{id}']
  @PostMapping paths=['/uploadannounce/{id}']
  @GetMapping paths=['/downloadannounce/{fileName}']
  @GetMapping paths=['/images/{filename}']
  @PostMapping paths=['/addAnnounce']
  @GetMapping paths=['/downloadannounce/{filename:.+}']
  @PostMapping paths=['/updateAnnounceWithImages/{id}']
  @GetMapping paths=['/mine']


==== java/com/example/evaliaproject/controller/NotificationController.java ====
Class: NotificationController (class)
Javadoc:
/**
 * Endpoints REST pour le front (Angular) :
 * - GET /notifications/me : liste des notifs de l'utilisateur courant
 * - POST /notifications/{id}/seen : marquer une notif comme vue
 * - POST /notifications/seen/all : tout marquer comme vu
 * - GET /notifications/me/unseen-count : compteur "non vues"
 */
Mappings:
  @RequestMapping paths=['/notifications']
  @GetMapping paths=['/me']
  @PostMapping paths=['/{id}/seen']
  @PostMapping paths=['/seen/all']
  @GetMapping paths=['/me/unseen-count']
  @GetMapping paths=['/me']
  @PostMapping paths=['/{id}/seen']
  @PostMapping paths=['/seen/all']
  @GetMapping paths=['/me/unseen-count']
Fields:
  private final NotificationService notificationService
  private final UserRepository userRepository
  private final NotificationService notificationService
  private final UserRepository userRepository


==== java/com/example/evaliaproject/controller/PlanningController.java ====
Class: PlanningController (class)
Javadoc:
/**
 * Endpoints CRUD + assignation.
 * On d√©duit l'owner (annonceur) via l'email de l'utilisateur connect√©.
 * Si tu as d√©j√† le userId dans le token, adapte selon ton SecurityContext.
 */
@RestController
@RequestMapping("/plannings")
@RequiredArgsConstructor
@CrossOrigin(origins = "http://localhost:4200", allowCredentials = "true")
public class PlanningController {

    private final PlanningService service;
    private final com.example.evaliaproject.repository.UserRepository userRepo;

    // Annonceur : cr√©er des slots (batch)
//    @PostMapping("/slots/{id}")
//    public ResponseEntity<List<Planning>> createSlots(@PathVariable Long id, @RequestBody SlotCreateDto dto) {
//      return ResponseEntity.ok(service.createSlots(id, dto));
//
//    }
    @PostMapping("/slots/{id}")
    public ResponseEntity<List<PlanningDto>> createSlots(@PathVariable Long id,
                                                         @RequestBody SlotCreateDto dto) {
        var saved = service.createSlots(id, dto);        // <- List<Planning>
        var body  = saved.stream().map(PlanningDto::of).toList(); // <- List<PlanningDto>
        return ResponseEntity.ok(body);                  // <- ResponseEntity<List<PlanningDto>>
    }
    @PatchMapping("/{id}/status")
    public ResponseEntity<Planning> statusById(@PathVariable String id,
                                               @RequestParam("actorId") Long actorId,
                                               @RequestBody UpdateStatusDto body) {
        return ResponseEntity.ok(service.updateStatusById(actorId, id, body));
    }
    // Annonceur : assigner un paneliste √† un slot
//    @PostMapping("/{id}/assign")
//    public ResponseEntity<Planning> assign(Authentication auth, @PathVariable String id, @RequestBody AssignPanelistDto body) {
//        return ResponseEntity.ok(service.assignPanelist(auth.getName(), id, body));
//    }

    @PostMapping("/{id}/assign")
    public ResponseEntity<PlanningDto> assign(Authentication auth, @PathVariable String id,
                                              @RequestBody AssignPanelistDto body) {
        return ResponseEntity.ok(PlanningDto.of(
                service.assignPanelist(auth.getName(), id, body)
        ));
    }
//    @PostMapping("/{id}/assign")
//    public ResponseEntity<PlanningDto> assign(Authentication auth, @PathVariable String id,
//                                              @RequestBody AssignPanelistDto body) {
//        return ResponseEntity.ok(PlanningDto.of(service.assignPanelist(auth.getName(), id, body)));
//    }

    // Changer le statut (paneliste ou annonceur)
//    @PatchMapping("/{id}/status")
//    public ResponseEntity<Planning> status(Authentication auth, @PathVariable String id, @RequestBody UpdateStatusDto body) {
//        return ResponseEntity.ok(service.updateStatus(auth.getName(), id, body));
//    } hedhii
//    @PatchMapping("/{id}/status")
//    public ResponseEntity<Planning> updateStatus(Authentication auth,
//                                                 @PathVariable String id,
//                                                 @RequestBody UpdateStatusDto body) {
//        return ResponseEntity.ok(service.updateStatus(auth.getName(), id, body));
//    }
//    @PatchMapping("/{id}/status")
//    public ResponseEntity<PlanningDto> status(Authentication auth, @PathVariable String id,
//                                              @RequestBody UpdateStatusDto body) {
//        return ResponseEntity.ok(PlanningDto.of(service.updateStatus(auth.getName(), id, body)));
//    }
    // Paneliste : mon calendrier
//    @GetMapping("/mine/{id}")
//    public ResponseEntity<List<Planning>> mine(@PathVariable Long id) {
//        return ResponseEntity.ok(service.mine(id));
//    }
    @GetMapping("/mine/{id}")
    public ResponseEntity<List<PlanningDto>> mine(@PathVariable Long id) {
        return ResponseEntity.ok(service.mine(id).stream().map(PlanningDto::of).toList());
    }

    // Annonceur : mon calendrier
//    @GetMapping("/owner/{id}")
//    public ResponseEntity<List<Planning>> owner(@PathVariable Long id) {
//        return ResponseEntity.ok(service.owner(id));
//    }

    @GetMapping("/owner/{id}")
    public ResponseEntity<List<PlanningDto>> owner(@PathVariable Long id) {
        return ResponseEntity.ok(service.owner(id).stream().map(PlanningDto::of).toList());
    }
    // Filtre par annonce (utile pour vue ‚Äúpar annonce‚Äù)
//    @GetMapping("/by-announcement/{annId}")
//    public ResponseEntity<List<Planning>> byAnnouncement(@PathVariable String annId) {
//        return ResponseEntity.ok(service.byAnnouncement(annId));
//    }


    @GetMapping("/by-announcement/{annId}")
    public ResponseEntity<List<PlanningDto>> byAnnouncement(@PathVariable String annId) {
        return ResponseEntity.ok(service.byAnnouncement(annId).stream().map(PlanningDto::of).toList());
    }
//    @PutMapping("/{id}")
//    public ResponseEntity<Planning> update(
//            Authentication auth,
//            @PathVariable String id,
//            @RequestBody UpdatePlanningDto body) {
//        return ResponseEntity.ok(service.update(auth.getName(), id, body));
//    }
@PutMapping("/{id}")
public ResponseEntity<PlanningDto> update(Authentication auth, @PathVariable String id,
                                          @RequestBody UpdatePlanningDto body) {
    return ResponseEntity.ok(PlanningDto.of(service.update(auth.getName(), id, body)));
}
    // Suppression (owner)
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void delete(Authentication auth, @PathVariable String id) {
        service.delete(auth.getName(), id);
    }
}













//    private final PlanningService service;
//    private final com.example.evaliaproject.repository.UserRepository userRepo;
//
//    private Long currentUserId(Authentication auth) {
//        var me = userRepo.findByEmail(auth.getName())
//                .orElseThrow(() -> new IllegalArgumentException("User not found"));
//        return me.getId_user();
//    }
//
//    /** Liste des RDV de l‚Äôannonceur (pour son calendrier) */
//    @GetMapping("/owner/me")
//    public List<PlanningDto> myOwnerPlans(Authentication auth){
//        return service.ownerList(currentUserId(auth));
//    }
//
//    /** Liste des RDV du paneliste (son calendrier personnel) */
//    @GetMapping("/panelist/me")
//    public List<PlanningDto> myPanelPlans(Authentication auth){
//        return service.panelistList(currentUserId(auth));
//    }
//
//    /** Cr√©ation d‚Äôun cr√©neau (annonceur) */
//    @PostMapping
//    @ResponseStatus(HttpStatus.CREATED)
//    public PlanningDto create(@RequestBody UpsertPlanningRequest req, Authentication auth){
//        return service.create(currentUserId(auth), req);
//    }
//
//    /** MAJ d‚Äôun cr√©neau (annonceur) */
//    @PutMapping("/{id}")
//    public PlanningDto update(@PathVariable String id,
//                              @RequestBody UpsertPlanningRequest req,
//                              Authentication auth){
//        return service.update(currentUserId(auth), id, req);
//    }
//
//    /** Assigner un paneliste (annonceur) */
//    @PutMapping("/{id}/assign")
//    public PlanningDto assign(@PathVariable String id,
//                              @RequestBody AssignPanelistRequest req,
//                              Authentication auth){
//        return service.assign(currentUserId(auth), id, req.panelistId());
//    }
//
//    /** Retirer un paneliste (annonceur) */
Mappings:
  @RequestMapping paths=['/plannings']
  @PostMapping paths=['/slots/{id}']
  @PostMapping paths=['/slots/{id}']
  @PostMapping paths=['/{id}/assign']
  @PostMapping paths=['/{id}/assign']
  @PostMapping paths=['/{id}/assign']
  @GetMapping paths=['/mine/{id}']
  @GetMapping paths=['/mine/{id}']
  @GetMapping paths=['/owner/{id}']
  @GetMapping paths=['/owner/{id}']
  @GetMapping paths=['/by-announcement/{annId}']
  @GetMapping paths=['/by-announcement/{annId}']
  @PutMapping paths=['/{id}']
  @PutMapping paths=['/{id}']
  @DeleteMapping paths=['/{id}']
  @GetMapping paths=['/owner/me']
  @GetMapping paths=['/panelist/me']
  @PostMapping paths=[]
  @PutMapping paths=['/{id}']
  @PutMapping paths=['/{id}/assign']
  @PutMapping paths=['/{id}/unassign']
Fields:
  private final PlanningService service
  private final PlanningService service


==== java/com/example/evaliaproject/controller/QuestionController.java ====
Class: QuestionController (class)
Mappings:
  @RequestMapping paths=['/question']
  @PostMapping paths=['/add']
  @PutMapping paths=['/update/{id}']
  @DeleteMapping paths=['/delete/{id}']
  @GetMapping paths=['/get/{id}']
  @GetMapping paths=['/all']
  @GetMapping paths=['/byQuiz/{idQuiz}']
Fields:
  private IQuestionService questionService


==== java/com/example/evaliaproject/controller/QuizController.java ====
Class: QuizController (class)
Mappings:
  @RequestMapping paths=['/quiz']
  @PostMapping paths=['/addQuiz']
  @GetMapping paths=['/getAllQuiz']
  @GetMapping paths=['/getDetailsQuiz/{id}']
  @PutMapping paths=['/updateQuiz/{id}']
  @GetMapping paths=['/getDetailsQuiz/{id}']
  @DeleteMapping paths=['/deleteQuiz/{id}']
  @PostMapping paths=['/submitQuiz/{id}']
  @GetMapping paths=['/byAnnouncement/{id}']


==== java/com/example/evaliaproject/controller/RecompensesController.java ====
Class: RecompensesController (class)
Mappings:
  @RequestMapping paths=[]
  @GetMapping paths=['/byAnnouncement/{id}']
  @GetMapping paths=['/byAnnouncement/{id}']
  @PostMapping paths=['/addRecomponse']
  @GetMapping paths=['/getAllRecompenses']
  @GetMapping paths=['/getDetailsRecompenses/{id}']
  @PutMapping paths=['/updateRecompenses/{id}']
  @DeleteMapping paths=['/deleteRecompenses/{id}']


==== java/com/example/evaliaproject/controller/FeedbackFileController.java ====
Class: FeedbackFileController (class)
Mappings:
  @RequestMapping paths=['/feedback-files']
  @GetMapping paths=['/images/{filename:.+}']


==== java/com/example/evaliaproject/controller/UserController.java ====
Class: UserController (class)
Mappings:
  @RequestMapping paths=[]
  @PostMapping paths=['/addUser']
  @GetMapping paths=['/getAllUsers']
  @GetMapping paths=['/getDetailsUser/{id}']
  @GetMapping paths=['/getPanelist']
  @PutMapping paths=['/updateUser/{id}']
  @DeleteMapping paths=['/deleteUser/{id}']


==== java/com/example/evaliaproject/controller/CategoryController.java ====
Class: CategoryController (class)
Mappings:
  @RequestMapping paths=['/categories']
  @GetMapping paths=['/getDetailsCategory/{id}']
  @GetMapping paths=['/getAllCategory']
  @GetMapping paths=['/{id}/announces']
  @PostMapping paths=['/init']


==== java/com/example/evaliaproject/controller/AdminValidationController.java ====
Class: AdminValidationController (class)
Mappings:
  @RequestMapping paths=['/api/v1/admin']
  @GetMapping paths=['/pending-users']
  @PostMapping paths=['/validate-user/{userId}']
  @PostMapping paths=['/validate/{id}']
  @GetMapping paths=['/pending-users']
  @PostMapping paths=['/validate-user/{id}']
  @PostMapping paths=['/reject-user/{id}']
Fields:
  private final UserRepository userRepository


==== java/com/example/evaliaproject/dto/PlanningDto.java ====


==== java/com/example/evaliaproject/dto/OwnerRewardItemDto.java ====


==== java/com/example/evaliaproject/dto/PanelistOptionDto.java ====


==== java/com/example/evaliaproject/dto/PanelistRewardItemDto.java ====
Class: PanelistRewardItemDto (class)
Fields:
  private String announcementId
  private String announcementName
  private typeRecompenses rewardType
  private BigDecimal amount
  private RewardPayoutStatus status
  private LocalDateTime createdAt


==== java/com/example/evaliaproject/dto/SlotCreateDto.java ====
Class: SlotCreateDto (class)
Class: Slot (class)
Fields:
  private String announcementId
  private List<Slot> slots
  private LocalDateTime startsAt
  private LocalDateTime endsAt
  private Long panelistId


==== java/com/example/evaliaproject/dto/NotificationDto.java ====


==== java/com/example/evaliaproject/dto/UpdatePlanningDto.java ====
Class: UpdatePlanningDto (class)
Fields:
  private String announcementId
  private Long panelistId
  private LocalDateTime startsAt
  private LocalDateTime endsAt
  private AppointmentStatus status


==== java/com/example/evaliaproject/dto/MyFeedbackItemDto.java ====
Class: MyFeedbackItemDto (class)
Fields:
  private String announcementId
  private String announcementName
  private Integer rating
  private String comment
  private LocalDateTime createdAt


==== java/com/example/evaliaproject/dto/NotificationMapper.java ====
Class: NotificationMapper (class)


==== java/com/example/evaliaproject/dto/FeedbackStatsDto.java ====
Class: FeedbackStatsDto (class)
Fields:
  private long total
  private double average
  private long stars1
  private long stars2
  private long stars3
  private long stars4
  private long stars5


==== java/com/example/evaliaproject/dto/AssignPanelistDto.java ====
Class: AssignPanelistDto (class)
Fields:
  private Long panelistId


==== java/com/example/evaliaproject/dto/UpdateStatusDto.java ====
Class: UpdateStatusDto (class)
Fields:
  private AppointmentStatus status


==== java/com/example/evaliaproject/dto/RecompenseLite.java ====


==== java/com/example/evaliaproject/dto/PanelistRewardsDto.java ====


==== java/com/example/evaliaproject/dto/OwnerFeedbackItemDto.java ====
Class: OwnerFeedbackItemDto (class)
Fields:
  private String idFeedback
  private LocalDateTime createdAt
  private Integer rating
  private String comment
  private Long panelistId
  private String panelistFirstname
  private String panelistLastname


==== java/com/example/evaliaproject/entity/AttemptDTO.java ====
Class: AttemptDTO (class)
Fields:
  private String idAttempt
  private AttemptStatus status


==== java/com/example/evaliaproject/entity/NotificationType.java ====
Class: NotificationType (enum)


==== java/com/example/evaliaproject/entity/typeRecompenses.java ====
Class: typeRecompenses (enum)


==== java/com/example/evaliaproject/entity/User.java ====
Class: User (class)
Fields:
  private Long id_user
  private String firstname
  private String lastname
  private String email
  private String password
  private boolean firstLoginCompleted
  private String registreCommercePath
  private String registreCommerceOriginalName
  private String ageRange
  private String jobTitle
  private String iban
  private String deliveryAddress
  private String companyName
  private boolean enabled
  private boolean verified
  private String activationCode
  private String numTelephone
  private boolean needsAdminValidation
  private LocalDateTime createdDate
  private LocalDateTime LastModifiedDate


==== java/com/example/evaliaproject/entity/TokenType.java ====
Class: TokenType (enum)


==== java/com/example/evaliaproject/entity/QuizAttempt.java ====
Class: QuizAttempt (class)
Fields:
  private String idAttempt
  private Announce announcement
  private Quiz quiz
  private User panelist
  private LocalDateTime startedAt
  private LocalDateTime submittedAt
  private AttemptStatus status
  private Integer score
  private boolean rewardGranted


==== java/com/example/evaliaproject/entity/RewardPayoutStatus.java ====
Class: RewardPayoutStatus (enum)


==== java/com/example/evaliaproject/entity/ResponsePaneliste.java ====
Class: ResponsePaneliste (class)
Fields:
  private String IdResponsePaneliste
  private Long IdPaneliste
  private String content
  private boolean isCorrect
  private Question question


==== java/com/example/evaliaproject/entity/Announce.java ====
Class: Announce (class)
Fields:
  private String idAnnouncement
  private String announceName
  private String content
  private String image
  private String productImages
  private LocalDateTime createdAt
  private String deliveryAddress
  private String officeAddress
  private User user
  private Admin admin
  private Category category


==== java/com/example/evaliaproject/entity/Token.java ====
Class: Token (class)
Fields:
  private Long id
  private String token
  private LocalDateTime createdAt
  private LocalDateTime expiresAt
  private LocalDateTime validatedAt
  private User user
  private LocalDateTime usedAt
  private TokenType type


==== java/com/example/evaliaproject/entity/TypeUser.java ====
Class: TypeUser (enum)


==== java/com/example/evaliaproject/entity/AttemptStatus.java ====
Class: AttemptStatus (enum)


==== java/com/example/evaliaproject/entity/Role.java ====
Class: Role (class)
Fields:
  private Long idrole
  private String nameRole
  private String description


==== java/com/example/evaliaproject/entity/Admin.java ====
Class: Admin (class)
Fields:
  private Long idadmin
  private String firstname
  private String lastname
  private String email
  private String password
  private String confirmPassword


==== java/com/example/evaliaproject/entity/Motif.java ====
Class: Motif (enum)


==== java/com/example/evaliaproject/entity/Recompenses.java ====
Class: Recompenses (class)
Fields:
  private String IdRecompense
  private BigDecimal amount
  private String label
  private Announce announcement


==== java/com/example/evaliaproject/entity/AttemptAnswerView.java ====
Class: AttemptAnswerView (class)


==== java/com/example/evaliaproject/entity/EarnedReward.java ====
Class: EarnedReward (class)
Fields:
  private String id
  private Announce announcement
  private User panelist
  private typeRecompenses rewardType
  private BigDecimal amount
  private String label
  private LocalDateTime createdAt


==== java/com/example/evaliaproject/entity/Notification.java ====
Class: Notification (class)
Fields:
  private String idnotif
  private User recipient
  private Announce announcement
  private NotificationType type
  private String message
  private LocalDateTime createdAt


==== java/com/example/evaliaproject/entity/Quiz.java ====
Class: Quiz (class)
Fields:
  private String idQuiz
  private String content
  private Announce announcement
  private List<Question> questions


==== java/com/example/evaliaproject/entity/typeReclamation.java ====
Class: typeReclamation (enum)


==== java/com/example/evaliaproject/entity/FeedbackOwnerDto.java ====
Class: FeedbackOwnerDto (class)
Fields:
  private String idFeedback
  private Integer rating
  private String comment
  private LocalDateTime createdAt
  private Long panelistId
  private String panelistName
  private String panelistEmail
  private String announcementId


==== java/com/example/evaliaproject/entity/Feedback.java ====
Class: Feedback (class)
Fields:
  private String idFeedback
  private Announce announcement
  private User panelist
  private String formDataJson
  private String comment
  private Integer rating
  private String imageName
  private LocalDateTime createdAt


==== java/com/example/evaliaproject/entity/Planning.java ====
Class: Planning (class)
Javadoc:
/**
 * Un cr√©neau "test au bureau".
 * Un seul paneliste par rendez-vous (ManyToOne).
 */
Fields:
  private String id
  private Announce announcement
  private User owner
  private User panelist
  private LocalDateTime startsAt
  private LocalDateTime endsAt


==== java/com/example/evaliaproject/entity/UserStatus.java ====
Class: UserStatus (enum)


==== java/com/example/evaliaproject/entity/Reclamation.java ====
Class: Reclamation (class)
Fields:
  private String Idreclamation
  private String content
  private Motif motif
  private User user
  private TypeUser userType
  private LocalDate createdAt


==== java/com/example/evaliaproject/entity/AppointmentStatus.java ====
Class: AppointmentStatus (enum)


==== java/com/example/evaliaproject/entity/Question.java ====
Class: Question (class)
Fields:
  private String idQuestion
  private String content
  private List<ResponsePaneliste> responses
  private Quiz quiz


==== java/com/example/evaliaproject/entity/Category.java ====
Class: Category (class)
Fields:
  private Long idcategory
  private String nameCategory


==== java/com/example/evaliaproject/entity/TestMode.java ====
Class: TestMode (enum)


==== java/com/example/evaliaproject/entity/Campagne.java ====
Class: Campagne (class)
Fields:
  private Long idCampagne
  private String name
  private String description
  private LocalDate startDate
  private LocalDate endDate


==== java/com/example/evaliaproject/entity/QuizAttemptView.java ====
Class: QuizAttemptView (class)
Fields:
  private String deliveryAddress
  private String numTelephone


==== java/com/example/evaliaproject/entity/AttemptAnswer.java ====
Class: AttemptAnswer (class)
Fields:
  private String idAttemptAnswer
  private QuizAttempt attempt
  private Question question
  private ResponsePaneliste selectedResponse
  private String freeText


==== java/com/example/evaliaproject/ai/ChatDtos/ChatRequest.java ====
Class: ChatRequest (class)
Fields:
  public List<ChatMessage> messages


==== java/com/example/evaliaproject/ai/ChatDtos/ChatAnswer.java ====
Class: ChatAnswer (class)
Fields:
  public String content
  public String model
  public String finishReason
  public Map<String, Object> raw


==== java/com/example/evaliaproject/ai/ChatDtos/ChatMessage.java ====
Class: ChatMessage (class)
Fields:
  public String role
  public String content


==== java/com/example/evaliaproject/profile/dto/ProfileController.java ====
Class: ProfileController (class)
Mappings:
  @RequestMapping paths=['/api/v1/profile']
  @GetMapping paths=['/me']
  @PutMapping paths=['/me']
  @PutMapping paths=['/password']
Fields:
  private final UserRepository userRepository
  private final PasswordEncoder passwordEncoder
  private final TokenRepository tokenRepository


==== java/com/example/evaliaproject/profile/dto/UpdateMeRequest.java ====
Class: UpdateMeRequest (class)
Fields:
  private String firstname
  private String lastname
  private String numTelephone
  private String companyName
  private String jobTitle
  private String ageRange
  private String iban
  private String deliveryAddress


==== java/com/example/evaliaproject/profile/dto/MeDto.java ====
Class: MeDto (class)
Fields:
  private Long id_user
  private String firstname
  private String lastname
  private String email
  private String numTelephone
  private TypeUser typeUser
  private String companyName
  private String jobTitle
  private String ageRange
  private String iban
  private String deliveryAddress
  private boolean verified
  private boolean enabled
  private boolean needsAdminValidation
  private boolean firstLoginCompleted


==== java/com/example/evaliaproject/profile/dto/ChangePasswordRequest.java ====
Class: ChangePasswordRequest (class)
Fields:
  private String currentPassword
  private String newPassword


